/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicOnlyRouteImport } from './routes/_public-only'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicHomeRouteImport } from './routes/_public/home'
import { Route as PublicOnlyValidateEmailRouteImport } from './routes/_public-only/validate-email'
import { Route as PublicOnlySignupRouteImport } from './routes/_public-only/signup'
import { Route as PublicOnlyResetPasswordRouteImport } from './routes/_public-only/reset-password'
import { Route as PublicOnlyLoginRouteImport } from './routes/_public-only/login'
import { Route as PublicOnlyForgotPasswordRouteImport } from './routes/_public-only/forgot-password'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'

const PublicOnlyRoute = PublicOnlyRouteImport.update({
  id: '/_public-only',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicHomeRoute = PublicHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => PublicRoute,
} as any)
const PublicOnlyValidateEmailRoute = PublicOnlyValidateEmailRouteImport.update({
  id: '/validate-email',
  path: '/validate-email',
  getParentRoute: () => PublicOnlyRoute,
} as any)
const PublicOnlySignupRoute = PublicOnlySignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => PublicOnlyRoute,
} as any)
const PublicOnlyResetPasswordRoute = PublicOnlyResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => PublicOnlyRoute,
} as any)
const PublicOnlyLoginRoute = PublicOnlyLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicOnlyRoute,
} as any)
const PublicOnlyForgotPasswordRoute =
  PublicOnlyForgotPasswordRouteImport.update({
    id: '/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => PublicOnlyRoute,
  } as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/forgot-password': typeof PublicOnlyForgotPasswordRoute
  '/login': typeof PublicOnlyLoginRoute
  '/reset-password': typeof PublicOnlyResetPasswordRoute
  '/signup': typeof PublicOnlySignupRoute
  '/validate-email': typeof PublicOnlyValidateEmailRoute
  '/home': typeof PublicHomeRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/forgot-password': typeof PublicOnlyForgotPasswordRoute
  '/login': typeof PublicOnlyLoginRoute
  '/reset-password': typeof PublicOnlyResetPasswordRoute
  '/signup': typeof PublicOnlySignupRoute
  '/validate-email': typeof PublicOnlyValidateEmailRoute
  '/home': typeof PublicHomeRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_public-only': typeof PublicOnlyRouteWithChildren
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_public-only/forgot-password': typeof PublicOnlyForgotPasswordRoute
  '/_public-only/login': typeof PublicOnlyLoginRoute
  '/_public-only/reset-password': typeof PublicOnlyResetPasswordRoute
  '/_public-only/signup': typeof PublicOnlySignupRoute
  '/_public-only/validate-email': typeof PublicOnlyValidateEmailRoute
  '/_public/home': typeof PublicHomeRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/profile'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/signup'
    | '/validate-email'
    | '/home'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/profile'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/signup'
    | '/validate-email'
    | '/home'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/_authenticated'
    | '/_public'
    | '/_public-only'
    | '/_authenticated/profile'
    | '/_public-only/forgot-password'
    | '/_public-only/login'
    | '/_public-only/reset-password'
    | '/_public-only/signup'
    | '/_public-only/validate-email'
    | '/_public/home'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  PublicOnlyRoute: typeof PublicOnlyRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public-only': {
      id: '/_public-only'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicOnlyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/home': {
      id: '/_public/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof PublicHomeRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public-only/validate-email': {
      id: '/_public-only/validate-email'
      path: '/validate-email'
      fullPath: '/validate-email'
      preLoaderRoute: typeof PublicOnlyValidateEmailRouteImport
      parentRoute: typeof PublicOnlyRoute
    }
    '/_public-only/signup': {
      id: '/_public-only/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof PublicOnlySignupRouteImport
      parentRoute: typeof PublicOnlyRoute
    }
    '/_public-only/reset-password': {
      id: '/_public-only/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof PublicOnlyResetPasswordRouteImport
      parentRoute: typeof PublicOnlyRoute
    }
    '/_public-only/login': {
      id: '/_public-only/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicOnlyLoginRouteImport
      parentRoute: typeof PublicOnlyRoute
    }
    '/_public-only/forgot-password': {
      id: '/_public-only/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof PublicOnlyForgotPasswordRouteImport
      parentRoute: typeof PublicOnlyRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface PublicRouteChildren {
  PublicHomeRoute: typeof PublicHomeRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicHomeRoute: PublicHomeRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

interface PublicOnlyRouteChildren {
  PublicOnlyForgotPasswordRoute: typeof PublicOnlyForgotPasswordRoute
  PublicOnlyLoginRoute: typeof PublicOnlyLoginRoute
  PublicOnlyResetPasswordRoute: typeof PublicOnlyResetPasswordRoute
  PublicOnlySignupRoute: typeof PublicOnlySignupRoute
  PublicOnlyValidateEmailRoute: typeof PublicOnlyValidateEmailRoute
}

const PublicOnlyRouteChildren: PublicOnlyRouteChildren = {
  PublicOnlyForgotPasswordRoute: PublicOnlyForgotPasswordRoute,
  PublicOnlyLoginRoute: PublicOnlyLoginRoute,
  PublicOnlyResetPasswordRoute: PublicOnlyResetPasswordRoute,
  PublicOnlySignupRoute: PublicOnlySignupRoute,
  PublicOnlyValidateEmailRoute: PublicOnlyValidateEmailRoute,
}

const PublicOnlyRouteWithChildren = PublicOnlyRoute._addFileChildren(
  PublicOnlyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  PublicOnlyRoute: PublicOnlyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
